create type "public"."Form Status" as enum ('draft', 'published', 'closed');

create type "public"."Publish Type" as enum ('open-public', 'secure-public');

create table "public"."Forms" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "owner" uuid default auth.uid(),
    "history" jsonb,
    "config" jsonb,
    "status" "Form Status" default 'draft'::"Form Status"
);


alter table "public"."Forms" enable row level security;

CREATE UNIQUE INDEX "Forms_pkey" ON public."Forms" USING btree (id);

alter table "public"."Forms" add constraint "Forms_pkey" PRIMARY KEY using index "Forms_pkey";

grant delete on table "public"."Forms" to "anon";

grant insert on table "public"."Forms" to "anon";

grant references on table "public"."Forms" to "anon";

grant select on table "public"."Forms" to "anon";

grant trigger on table "public"."Forms" to "anon";

grant truncate on table "public"."Forms" to "anon";

grant update on table "public"."Forms" to "anon";

grant delete on table "public"."Forms" to "authenticated";

grant insert on table "public"."Forms" to "authenticated";

grant references on table "public"."Forms" to "authenticated";

grant select on table "public"."Forms" to "authenticated";

grant trigger on table "public"."Forms" to "authenticated";

grant truncate on table "public"."Forms" to "authenticated";

grant update on table "public"."Forms" to "authenticated";

grant delete on table "public"."Forms" to "service_role";

grant insert on table "public"."Forms" to "service_role";

grant references on table "public"."Forms" to "service_role";

grant select on table "public"."Forms" to "service_role";

grant trigger on table "public"."Forms" to "service_role";

grant truncate on table "public"."Forms" to "service_role";

grant update on table "public"."Forms" to "service_role";

create policy "Enable all for owner users"
on "public"."Forms"
as permissive
for all
to authenticated
using ((( SELECT auth.uid() AS uid) = owner))
with check ((( SELECT auth.uid() AS uid) = owner));